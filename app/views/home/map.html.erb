<%= register_websocket(:channels => ["all"], :client => current_user.id) %>

<h1 style="text-align: center;">GeoGraph Monitor</h1>

<div id="refresh-container">
  <%= button_tag "start refresh", :id => 'refresh-button', :onclick => "switchRefresh();" %>
</div>

<div id="map_canvas" style="width:1024px; height:768px; margin: 0 auto;"></div>

<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyCXQO2oj9QzIl0RGXzDCO-JTa2j--FbVNg&sensor=true"></script>
<script type="text/javascript">


  var refreshEnabled = false;
  var refreshInterval = null;

  function switchRefresh() {
    var buttonText = "stop refresh";
    if(refreshEnabled) {
      clearInterval(refreshInterval);
      buttonText = "start refresh";
    } else {
      refreshInterval = setInterval(refreshMap, 5000);
    }
    refreshEnabled = !refreshEnabled;
    $("#refresh-button span").html(buttonText);
  }

  function refreshMap() {
    $.ajax({url: 'map', dataType: 'script'});
  }

  var map = null;
  var markers = new Hash();
  var infoWindows = {};
  var currentGeoObjects = [];
  var currentEdges = [];
  var currentCycle = 0;
  var mapEdges = new Hash();
  var mapCenterLat = 41.9;
  var mapCenterLng = 12.4;
  var infoWindowTemplate = '<div id="content-{GEOOBJECTID}"><h2 id="content-heading-{GEOOBJECTID}">{GEOOBJECTTYPE}</h2><div id="body-content-{GEOOBJECTID}">{GEOOBJECTDATA}</div></div>';

  function initializeMap() {
    var latlng = new google.maps.LatLng(mapCenterLat, mapCenterLng);
    var myOptions = {
      zoom: 2,
      center: latlng,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

  }

  function addGeoObject(geoObject) {
    //var latlng = new google.maps.LatLng(mapCenterLat + (geoObject.latitude/100), mapCenterLng + (geoObject.longitude/100));
    var latlng = new google.maps.LatLng(geoObject.latitude, geoObject.longitude);
    
    markers[geoObject.id] = new google.maps.Marker({
      position: latlng,
      map: map,
      //animation: google.maps.Animation.DROP,
      title:"GeoObject: " + geoObject.id
    });
    // centerMap(latlng);

    var icon = null;
    if(geoObject.data.type == "MovableAgent") {
      icon = '/assets/bike.png';
    } else if(geoObject.data.type == "BloggerAgent"){
      icon = '/assets/post.png';
    }
    if(icon != null) markers[geoObject.id].setIcon(icon);

    addInfoWindow(geoObject, markers[geoObject.id]);
  }

  function addInfoWindow(geoObject, marker) {
    var infoWindowContent = infoWindowSource(geoObject);
    var infoWindow = new google.maps.InfoWindow({
      content: infoWindowContent
    });
    google.maps.event.addListener(marker, 'click', function() {
        infoWindow.open(map, marker);
    });
    infoWindows[geoObject.id] = infoWindow;
  }

  function updateInfoWindow(geoObject) {
    var infoWindowContent = infoWindowSource(geoObject);
    infoWindows[geoObject.id].setContent(infoWindowContent);
  }

  function infoWindowSource(geoObject) {
    var infoWindowContent = infoWindowTemplate.replace(/{GEOOBJECTID}/g, geoObject.id);
    infoWindowContent = infoWindowContent.replace(/{GEOOBJECTTYPE}/g, geoObject.data['type']);
    infoWindowContent = infoWindowContent.replace(/{GEOOBJECTDATA}/g, geoObject.data['body']);
    return infoWindowContent;
  }

  function moveGeoObject(geoObject) {
    //var latlng = new google.maps.LatLng(mapCenterLat + (geoObject.latitude/100), mapCenterLng + (geoObject.longitude/100));
    var latlng = new google.maps.LatLng(geoObject.latitude, geoObject.longitude);
    markers[geoObject.id].setPosition(latlng);
    //markers[geoObject.id].setAnimation(google.maps.Animation.DROP);
    //markers[geoObject.id].setAnimation(google.maps.Animation.BOUNCE);
    //setTimeout(function() {markers[geoObject.id].setAnimation(null);}, 500);
    //centerMap(latlng);

    updateInfoWindow(geoObject);
  }

  function destroyGeoObject(geoObject) {
    if(markers[geoObject.id] == undefined) return;
    markers[geoObject.id].setMap(null);
    markers[geoObject.id] = null;
  }

  function destroyGeoObjects(ids) {
    ids.each(function(_id){
      markers[_id].setMap(null);
      markers[_id] = null;
    });
  }

  function destroyAllGeoObjects() {
    markers.each(function(value, key) {
      value.setMap(null);
      value = null;
    });
    markers = new Hash();
  }

  function onPercept(perception) {
    var geoObject = perception["data"];

    if(perception["header"]["action"] == "actions::destroy_action") {
      destroyGeoObject(geoObject);
      return;
    }

    if(perception["header"]["action"] == "actions::destroy_posts_action") {
      destroyGeoObjects(geoObject.ids);
      return;
    }
    
    if(markers[geoObject.id] != undefined) {
      moveGeoObject(geoObject);
    } else {
      addGeoObject(geoObject);
    }
  }

  function onPostsReadPercept(perception) {
    var posts = perception['data'];
    posts.each(function(post) {
      if(markers[post.id] != null) {
        markers[post.id].setAnimation(google.maps.Animation.BOUNCE);
        setTimeout(function() {markers[post.id].setAnimation(null);}, 2000);
      }
    });
  }

  function onEdgesPercept(perception) {
    //removeAllEdges();
    //try{
    var edges = perception["data"];
    edges.each(function(edge) {
      removeEdge(edge);
    });
    edges.each(function(edge) {
      addEdge(edge);
    });
    //} catch(err) {
    //  $log(err.stack);
    //}
  }

  function addEdge(edge) {
    //$log(JSON.stringify(edge));
    
    var edgeCoordinates = [
      new google.maps.LatLng(edge.from.latitude, edge.from.longitude),
      new google.maps.LatLng(edge.to.latitude, edge.to.longitude)
    ];
    
    var edgePath = new google.maps.Polyline({
      path: edgeCoordinates,
      strokeColor: "#FF0000",
      strokeOpacity: 1.0,
      strokeWeight: 2
    });

    edgePath.setMap(map);
    var edgeIdx = edgeIndex(edge);
    if(mapEdges[edgeIdx] == null) {
      mapEdges[edgeIdx] = [];
    }

    mapEdges[edgeIdx].push(edgePath);
  }

  function edgeIndex(edge) {    
    var sortedIds = [edge.from.id, edge.to.id].sort();
    var index = "";
    sortedIds.each(function(id){ return index += id; });
    return index;
  }

  function removeEdge(edge) {
    var edgeIdx = edgeIndex(edge);
    if(mapEdges[edgeIdx] == undefined) return;
    mapEdges[edgeIdx].each(function(mEdge) {
      mEdge.setMap(null);
      mEdge = null;
    });
    mapEdges[edgeIdx] = [];
  }

  function removeAllEdges() {
    mapEdges.each(function(mEdge) {
      mEdge.setMap(null);
      mEdge = null;
    });
    mapEdges = [];
  }

  function centerMap(latLng) {
    var bounds = new google.maps.LatLngBounds();
    bounds.extend(latLng);
    map.fitBounds(bounds);
    map.setZoom(8);
  }


  function refreshEdges(freshEdges) {
    removeAllEdges();
    freshEdges.each(function(edge){
      addEdge(edge);
    });
  }

  <%#*function refresEdgesBetter(freshEdges) {%>
    <%#*freshEdges.each(function(edge) {%>
      <%#*var existingEdge = mapEdges[edgeIndex(edge)];%>
      <%#*// if the edge exists update its position if changed%>
      <%#*if(existingEdge != undefined) {%>

        <%#*removeEdge(edge);%>
        <%#*addEdge(edge);%>
      <%#*} else {%>
        <%#*// if the edge don't exists create it%>
        <%#*addEdge(edge);%>
      <%#*}%>
    <%#*});%>
    <%#*currentCycle++;%>
  <%#*}%>

  function refreshGeoObjects(freshGeoObjects) {
    destroyAllGeoObjects();
    freshGeoObjects.each(function(geoObject){
      addGeoObject(geoObject);
    });
  }

  $(document).ready(function() {
    $("#refresh-button").button();
    
    initializeMap();
    currentGeoObjects = <%= @geo_objects.html_safe %>;
    currentGeoObjects.each(function(geoObject){
      addGeoObject(geoObject);
    });

    currentEdges = <%= @edges.html_safe %>;
    currentEdges.each(function(edge){
      addEdge(edge);
    });
  });
</script>

