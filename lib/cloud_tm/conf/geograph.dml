package it.algo.geograph.domain;


// VALUE TYPES

valueType java.math.BigDecimal as Decimal {
    externalizeWith {
        String toString();
    }
}

valueType java.util.Date as Date {
    externalizeWith {
        String toString();
    }
}

// DOMAIN OBJECTS

class Agent {
  String status;
  String user;
}

class Trackable extends Agent {}

class Track {
  Date timestamp;
}

class GeoObject {
  String type;
  String body;
  Decimal latitude;
  Decimal longitude;
}

class Post  extends GeoObject{
  Integer likes;
  String text;
  //String user;
}

class Landmark {
  Integer x;
  Integer y;
  Decimal latitude;
  Decimal longitude;
  String type;
  String body;
  String cell;
}

class Root { // This is the root domain object
    boolean loaded;         // auxiliary slot for the bootstrap sequence
    Integer numAgentIds;    // for the generation of Agent ids
    Integer numPropertiesIds; // FIXME is this the right way to do it?
}

/*
class Place  extends GeoObject{
  String description;
  String user;
  Integer checkins;
}

class Comment {
  String text;
}

class Properties {
  String edge_processor_strategy; // job or action
  Integer distance;
}
*/



// RELATIONS

relation DomainRootHasRoot {
    .pt.ist.fenixframework.DomainRoot playsRole;
    Root playsRole app;
}


relation RootHasAgents {
    Root playsRole;  //For unidirectional write no role name
    Agent playsRole agents {
        multiplicity *;
        indexed by user;
    }
}

/*

relation RootHasProperties {
   Root playsRole;
   Properties playsRole properties { multiplicity 0..1; }
}
*/

relation AgentHasPosts { //add posts must use closed simulation to avoid conflicts
    Agent playsRole agent;
    Post playsRole posts { multiplicity *; }
}

/*
relation AgentWroteComment { //add posts must use closed simulation to avoid conflicts
    Agent playsRole agent;
    Comment playsRole comments { multiplicity *; }
}

relation PostHasComment { //add posts must use closed simulation to avoid conflicts
    Post playsRole post;
    Comment playsRole comments { multiplicity *; }
}

relation PlaceHasPost { //add posts must use closed simulation to avoid conflicts
    Place playsRole place;
    Post playsRole posts { multiplicity *; }
}

relation GeoObjectHasGeoObject {
  GeoObject playsRole neighbours { multiplicity *; }
  GeoObject playsRole; // this is IMPORTANT!!! :-)
}

*/

relation RootHasLandmarks {
  Root playsRole;
  Landmark playsRole landmarks { 
    multiplicity *; 
    indexed by cell;
  }
}

relation LandmarkHasGeoObjects {
  Landmark playsRole landmark;
  GeoObject playsRole geoObjects { multiplicity *; }
}

relation TrackableHasTracks {
  Trackable playsRole;
  Track playsRole tracks { multiplicity *; }
}

relation TrackableHasCurrentTrack {
  Trackable playsRole;
  Track playsRole currentTrack;
}

relation TrackableHasCurrentPosition {
  Trackable playsRole;
  GeoObject playsRole currentPosition;
}

relation TrackHasGeoObjects {
  Track playsRole track;
  GeoObject playsRole geoObjects { multiplicity *; }
}